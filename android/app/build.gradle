plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new RuntimeException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}



android {
    namespace 'com.rivorya.flortya'
    compileSdk 36
    ndkVersion "27.0.12077973"
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    aaptOptions {
        noCompress 'tflite'
    }

    defaultConfig {
        applicationId "com.rivorya.flortya"
        minSdk 23
        targetSdk 36
        versionCode flutter.versionCode
        versionName flutter.versionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        debug {
            // Debug yapılandırması
        }

        release {
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude '**/*.proto'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
    }


}



dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    implementation platform('com.google.firebase:firebase-bom:32.7.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation 'com.google.mlkit:text-recognition:16.0.0'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:19.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
}

// APK dosyasını Flutter'ın beklediği konuma kopyala
afterEvaluate {
    tasks.named("assembleDebug").configure {
        doLast {
            def sourceApk = file("${buildDir}/outputs/flutter-apk/app-debug.apk")
            def targetDir = file("${rootProject.projectDir}/build/app/outputs/flutter-apk")
            def targetApk = file("${targetDir}/app-debug.apk")
            
            if (sourceApk.exists()) {
                targetDir.mkdirs()
                copy {
                    from sourceApk
                    into targetDir
                }
                println "APK kopyalandı: ${targetApk.absolutePath}"
            }
        }
    }
    
    tasks.named("assembleRelease").configure {
        doLast {
            def sourceApk = file("${buildDir}/outputs/flutter-apk/app-release.apk")
            def targetDir = file("${rootProject.projectDir}/build/app/outputs/flutter-apk")
            def targetApk = file("${targetDir}/app-release.apk")
            
            if (sourceApk.exists()) {
                targetDir.mkdirs()
                copy {
                    from sourceApk
                    into targetDir
                }
                println "APK kopyalandı: ${targetApk.absolutePath}"
            }
        }
    }
} 